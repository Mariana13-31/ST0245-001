
import javafx.util.Pair;
public class impurezaGini
{
  
    /**
     * Gini calcula la impureza Gini en un arreglo de dos dimensiones
     */
    public static double Gini(String[][] Array){
        
        int i=0;
        int exito=0;
        while(i<Array.length){
            if(Array[i][(Array[0].length)-1] == "1"){
                exito++;
            }
            i++;
        }
        int noExito=Array.length-exito;
        
        double pExito = (exito/Array.length);
        double pNoExito = (noExito/Array.length);
        
        double gini = 1 - (Math.pow(pExito,2) + Math.pow(pNoExito,2));

        return gini;
        
    }

    /**
     * Ponderada calcula la impureza Gini ponderada 
     */
    public static double Ponderada(String[][] arreglo, int posCondi, String condi){
        
        Pair<String[][], String[][]> Dato = divDatos(arreglo,posCondi,condi);
        double der= Gini(Dato.getKey());
        double izq= Gini(Dato.getValue());
        
        int nDerecho = Dato.getKey().length;
        int nIzquierdo = Dato.getValue().length;
        
        double Ponderada = ((der * nDerecho) / (nIzquierdo + nDerecho)) + ((izq * nIzquierdo) / (nIzquierdo + nDerecho));
        
        return Ponderada;

    }

    /**
     * dividirDatos divide un arreglo en parejas
     */
    public static Pair<String[][],String[][]> divDatos(String[][] array, int posCondi, String condi){
        int eq = 0;
        int i = 0;
        while( i < array.length){
            if(array[i][posCondi] == condi){
                eq++;
            }
            i++;
        }
        int noEq = array.length - eq;
        
        int rowEq = 0;
        int rowDiff = 0;
        
        String[][] noEqual = new String[noEq][array[0].length-1];
        String[][] equal = new String[eq][array[0].length-1];
        for(int row = 0; row < array.length; row ++){
            if(condi == array[row][posCondi]){
                equal[rowEq]=array[row];
                rowEq++;
            }else{
                noEqual[rowDiff]= array[row];
                rowDiff++;
            }
        }
       
        
        Pair<String[][], String[][]> Dato= new Pair(equal, noEqual);
        return Dato;

    }
}
